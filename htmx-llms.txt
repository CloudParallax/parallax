# HTMX Reference

> A comprehensive inline reference for HTMX core and additional attributes, CSS classes, HTTP request and response headers, events, JavaScript API methods, and configuration options.

Below is the complete HTMX reference, with every attribute, class, header, event, API method, and configuration option included inline.

- **Core Attributes**
  - `hx-get`: issues a GET to the specified URL
  - `hx-post`: issues a POST to the specified URL
  - `hx-on*`: handle events with inline scripts on elements
  - `hx-push-url`: push a URL into the browser location bar to create history
  - `hx-select`: select content to swap in from a response
  - `hx-select-oob`: select content to swap in from a response, somewhere other than the target (out of band)
  - `hx-swap`: controls how content will swap in (outerHTML, beforeend, afterend, …)
  - `hx-swap-oob`: mark element to swap in from a response (out of band)
  - `hx-target`: specifies the target element to be swapped
  - `hx-trigger`: specifies the event that triggers the request
  - `hx-vals`: add values to submit with the request (JSON format)

- **Additional Attributes**
  - `hx-boost`: add progressive enhancement for links and forms
  - `hx-confirm`: shows a `confirm()` dialog before issuing a request
  - `hx-delete`: issues a DELETE to the specified URL
  - `hx-disable`: disables htmx processing for the given node and any children nodes
  - `hx-disabled-elt`: adds the `disabled` attribute to the specified elements while a request is in flight
  - `hx-disinherit`: control and disable automatic attribute inheritance for child nodes
  - `hx-encoding`: changes the request encoding type
  - `hx-ext`: extensions to use for this element
  - `hx-headers`: adds to the headers that will be submitted with the request
  - `hx-history`: prevent sensitive data being saved to the history cache
  - `hx-history-elt`: the element to snapshot and restore during history navigation
  - `hx-include`: include additional data in requests
  - `hx-indicator`: the element to put the `htmx-request` class on during the request
  - `hx-inherit`: control and enable automatic attribute inheritance for child nodes if it has been disabled by default
  - `hx-params`: filters the parameters that will be submitted with a request
  - `hx-patch`: issues a PATCH to the specified URL
  - `hx-preserve`: specifies elements to keep unchanged between requests
  - `hx-prompt`: shows a `prompt()` before submitting a request
  - `hx-put`: issues a PUT to the specified URL
  - `hx-replace-url`: replace the URL in the browser location bar
  - `hx-request`: configures various aspects of the request
  - `hx-sync`: control how requests made by different elements are synchronized
  - `hx-validate`: force elements to validate themselves before a request
  - `hx-vars`: adds values dynamically to the parameters to submit with the request (deprecated, please use `hx-vals`)

- **CSS Classes**
  - `htmx-added`: applied to a new piece of content before it is swapped; removed after it is settled
  - `htmx-indicator`: a dynamically generated class that will toggle visible (opacity:1) when a `htmx-request` class is present
  - `htmx-request`: applied to either the element or the element specified with `hx-indicator` while a request is ongoing
  - `htmx-settling`: applied to a target after content is swapped; removed after it is settled (duration can be modified via `hx-swap`)
  - `htmx-swapping`: applied to a target before any content is swapped; removed after it is swapped (duration can be modified via `hx-swap`)

- **HTTP Request Headers**
  - `HX-Boosted`: indicates that the request is via an element using `hx-boost`
  - `HX-Current-URL`: the current URL of the browser
  - `HX-History-Restore-Request`: “true” if the request is for history restoration after a miss in the local history cache
  - `HX-Prompt`: the user response to an `hx-prompt`
  - `HX-Request`: always “true”
  - `HX-Target`: the id of the target element if it exists
  - `HX-Trigger-Name`: the name of the triggered element if it exists
  - `HX-Trigger`: the id of the triggered element if it exists

- **HTTP Response Headers**
  - `HX-Location`: allows you to do a client-side redirect that does not do a full page reload
  - `HX-Push-Url`: pushes a new URL into the history stack
  - `HX-Redirect`: can be used to do a client-side redirect to a new location
  - `HX-Refresh`: if set to “true” the client-side will do a full refresh of the page
  - `HX-Replace-Url`: replaces the current URL in the location bar
  - `HX-Reswap`: allows you to specify how the response will be swapped (see `hx-swap` for possible values)
  - `HX-Retarget`: a CSS selector that updates the target of the content update to a different element on the page
  - `HX-Reselect`: a CSS selector that chooses which part of the response is used to be swapped in (overrides any `hx-select`)
  - `HX-Trigger`: allows you to trigger client-side events
  - `HX-Trigger-After-Settle`: allows you to trigger client-side events after the settle step
  - `HX-Trigger-After-Swap`: allows you to trigger client-side events after the swap step

- **Events**
  - `htmx:abort`: send this event to an element to abort a request
  - `htmx:afterOnLoad`: triggered after an AJAX request has completed processing a successful response
  - `htmx:afterProcessNode`: triggered after htmx has initialized a node
  - `htmx:afterRequest`: triggered after an AJAX request has completed
  - `htmx:afterSettle`: triggered after the DOM has settled
  - `htmx:afterSwap`: triggered after new content has been swapped in
  - `htmx:beforeCleanupElement`: triggered before htmx disables an element or removes it from the DOM
  - `htmx:beforeOnLoad`: triggered before any response processing occurs
  - `htmx:beforeProcessNode`: triggered before htmx initializes a node
  - `htmx:beforeRequest`: triggered before an AJAX request is made
  - `htmx:beforeSwap`: triggered before a swap is done; allows configuration of the swap
  - `htmx:beforeSend`: triggered just before an AJAX request is sent
  - `htmx:beforeTransition`: triggered before the View Transition wrapped swap occurs
  - `htmx:configRequest`: triggered before the request; allows customization of parameters and headers
  - `htmx:confirm`: triggered after a trigger occurs on an element; allows canceling or delaying the AJAX request
  - `htmx:historyCacheError`: triggered on an error during cache writing
  - `htmx:historyCacheMiss`: triggered on a cache miss in the history subsystem
  - `htmx:historyCacheMissError`: triggered on an unsuccessful remote retrieval
  - `htmx:historyCacheMissLoad`: triggered on a successful remote retrieval
  - `htmx:historyRestore`: triggered when htmx handles a history restoration action
  - `htmx:beforeHistorySave`: triggered before content is saved to the history cache
  - `htmx:load`: triggered when new content is added to the DOM
  - `htmx:noSSESourceError`: triggered when an element refers to an SSE event but no parent SSE source is defined
  - `htmx:onLoadError`: triggered when an exception occurs during onLoad handling
  - `htmx:oobAfterSwap`: triggered after an out-of-band element has been swapped in
  - `htmx:oobBeforeSwap`: triggered before an out-of-band element swap is done; allows swap configuration
  - `htmx:oobErrorNoTarget`: triggered when an out-of-band element has no matching ID in the DOM
  - `htmx:prompt`: triggered after a `prompt()` is shown
  - `htmx:pushedIntoHistory`: triggered after a URL is pushed into history
  - `htmx:replacedInHistory`: triggered after a URL is replaced in history
  - `htmx:responseError`: triggered when a non-200/300 HTTP response occurs
  - `htmx:sendAbort`: triggered when a request is aborted
  - `htmx:sendError`: triggered when a network error prevents a request
  - `htmx:sseError`: triggered when an error occurs with an SSE source
  - `htmx:sseOpen`: triggered when an SSE source is opened
  - `htmx:swapError`: triggered when an error occurs during the swap phase
  - `htmx:targetError`: triggered when an invalid target is specified
  - `htmx:timeout`: triggered when a request timeout occurs
  - `htmx:validation:validate`: triggered before an element is validated
  - `htmx:validation:failed`: triggered when an element fails validation
  - `htmx:validation:halted`: triggered when a request is halted due to validation errors
  - `htmx:xhr:abort`: triggered when an AJAX request aborts
  - `htmx:xhr:loadend`: triggered when an AJAX request ends
  - `htmx:xhr:loadstart`: triggered when an AJAX request starts
  - `htmx:xhr:progress`: triggered periodically during an AJAX request that supports progress events

- **JavaScript API Methods**
  - `htmx.addClass()`: Adds a class to the given element
  - `htmx.ajax()`: Issues an htmx-style AJAX request
  - `htmx.closest()`: Finds the closest parent to the given element matching the selector
  - `htmx.config`: Holds the current htmx configuration object
  - `htmx.createEventSource`: Creates SSE EventSource objects for htmx
  - `htmx.createWebSocket`: Creates WebSocket objects for htmx
  - `htmx.defineExtension()`: Defines an htmx extension
  - `htmx.find()`: Finds a single element matching the selector
  - `htmx.findAll()`: Finds all elements matching a given selector
  - `htmx.logAll()`: Installs a logger that logs all htmx events
  - `htmx.logger`: The current logger instance (default `null`)
  - `htmx.off()`: Removes an event listener from the given element
  - `htmx.on()`: Adds an event listener to the given element
  - `htmx.onLoad()`: Adds a callback for the `htmx:load` event
  - `htmx.parseInterval()`: Parses an interval declaration into milliseconds
  - `htmx.process()`: Initializes htmx behavior on an element and its children
  - `htmx.remove()`: Removes the given element
  - `htmx.removeClass()`: Removes a class from the given element
  - `htmx.removeExtension()`: Removes an htmx extension
  - `htmx.swap()`: Performs swapping and settling of HTML content
  - `htmx.takeClass()`: Takes a class from other elements for the given element
  - `htmx.toggleClass()`: Toggles a class on the given element
  - `htmx.trigger()`: Triggers an event on an element
  - `htmx.values()`: Returns the input values associated with the given element

- **Configuration Options**
  - `htmx.config.historyEnabled`: defaults to `true` (useful for testing)
  - `htmx.config.historyCacheSize`: defaults to `10`
  - `htmx.config.refreshOnHistoryMiss`: defaults to `false`; if `true`, full page refresh on history misses
  - `htmx.config.defaultSwapStyle`: defaults to `innerHTML`
  - `htmx.config.defaultSwapDelay`: defaults to `0`
  - `htmx.config.defaultSettleDelay`: defaults to `20`
  - `htmx.config.includeIndicatorStyles`: defaults to `true` (load indicator styles)
  - `htmx.config.indicatorClass`: defaults to `htmx-indicator`
  - `htmx.config.requestClass`: defaults to `htmx-request`
  - `htmx.config.addedClass`: defaults to `htmx-added`
  - `htmx.config.settlingClass`: defaults to `htmx-settling`
  - `htmx.config.swappingClass`: defaults to `htmx-swapping`
  - `htmx.config.allowEval`: defaults to `true` (enable eval-based features)
  - `htmx.config.allowScriptTags`: defaults to `true` (process scripts in new content)
  - `htmx.config.inlineScriptNonce`: defaults to `''` (no nonce on inline scripts)
  - `htmx.config.inlineStyleNonce`: defaults to `''` (no nonce on inline styles)
  - `htmx.config.attributesToSettle`: defaults to `["class","style","width","height"]`
  - `htmx.config.wsReconnectDelay`: defaults to `full-jitter`
  - `htmx.config.wsBinaryType`: defaults to `blob`
  - `htmx.config.disableSelector`: defaults to `[hx-disable],[data-hx-disable]`
  - `htmx.config.disableInheritance`: defaults to `false`
  - `htmx.config.withCredentials`: defaults to `false`
  - `htmx.config.timeout`: defaults to `0` (no timeout)
  - `htmx.config.scrollBehavior`: defaults to `instant` (options: `instant`,`smooth`,`auto`)
  - `htmx.config.defaultFocusScroll`: defaults to `false`
  - `htmx.config.getCacheBusterParam`: defaults to `false`
  - `htmx.config.globalViewTransitions`: defaults to `false`
  - `htmx.config.methodsThatUseUrlParams`: defaults to `["get","delete"]`
  - `htmx.config.selfRequestsOnly`: defaults to `true`
  - `htmx.config.ignoreTitle`: defaults to `false`
  - `htmx.config.scrollIntoViewOnBoost`: defaults to `true`
  - `htmx.config.triggerSpecsCache`: defaults to `null`
  - `htmx.config.responseHandling`: defaults to `swap` on 2xx, `error` otherwise
  - `htmx.config.allowNestedOobSwaps`: defaults to `true`
